from db import db


# this class provides the methods to find a task in the db by
# id, to insert or update a task, and delete a task

# the 'db.Model' below extends this class from SQLAlchemy
class TaskModel(db.Model):

    # these lines map this class model to a specific table and
    # and to specific columns and to specify data types for those
    # columns and sets limits like character length
    # the 'primary_key' portion also tells SQLAlchemy that this
    # will be the key that is auto generated by sql
    __tablename__ = 'tasks'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(80))
    description = db.Column(db.String(500))
    duedate = db.Column(db.String(10))
    completed = db.Column(db.Boolean, default=False)

    # constructor function with parameters to initialize an instance
    def __init__(self, name, description, duedate, completed):
        self.name = name
        self.description = description
        self.duedate = duedate
        self.completed = completed
        self.id

    # method that formats the responses before sending
    def json(self):
        return {'id':self.id, 'data': {'name': self.name, 'description': self.description, 'duedate': self.duedate, 'completed': self.completed}}


    # this is a class level method that is called on the class
    # not an instance
    # @classmethod
    # def find_by_name(cls, name):

        # this line is made possible by extending SQLAlchemy
        # and writes the db query for us in the background
        # and handles all the db connection, cursor, commit, and close tasks
        # this line is equivalent to: SELECT * FROM tasks WHERE name=name LIMIT 1
        # and returns an TaskModel instance
        # return cls.query.filter_by(name=name).first()


    # this is a class level method that is called on the class
    # not an instance
    @classmethod
    def find_by_id(cls, id):
        return cls.query.get(id)


    # this instance method replaces insert and update queries
    # SQLAlchemy handles performing insertion or updates
    # to the data in the db in the background
    def save_to_db(self):
        db.session.add(self)
        db.session.commit()


    def delete_from_db(self):
        db.session.delete(self)
        db.session.commit()